--- a/net/minecraft/client/renderer/block/model/BlockModel.java
+++ b/net/minecraft/client/renderer/block/model/BlockModel.java
@@ -26,15 +_,17 @@
 import net.neoforged.api.distmarker.OnlyIn;
 
 @OnlyIn(Dist.CLIENT)
-public class BlockModel implements UnbakedModel {
+public class BlockModel implements UnbakedModel, net.neoforged.neoforge.client.model.ExtendedUnbakedModel {
     @VisibleForTesting
     public static final Gson GSON = new GsonBuilder()
+        .registerTypeHierarchyAdapter(UnbakedModel.class, new net.neoforged.neoforge.client.model.UnbakedModelParser.Deserializer())
         .registerTypeAdapter(BlockModel.class, new BlockModel.Deserializer())
         .registerTypeAdapter(BlockElement.class, new BlockElement.Deserializer())
         .registerTypeAdapter(BlockElementFace.class, new BlockElementFace.Deserializer())
         .registerTypeAdapter(BlockFaceUV.class, new BlockFaceUV.Deserializer())
         .registerTypeAdapter(ItemTransform.class, new ItemTransform.Deserializer())
         .registerTypeAdapter(ItemTransforms.class, new ItemTransforms.Deserializer())
+        .registerTypeAdapter(com.mojang.math.Transformation.class, new net.neoforged.neoforge.common.util.TransformationHelper.Deserializer())
         .create();
     private final List<BlockElement> elements;
     @Nullable
@@ -49,7 +_,15 @@
     private UnbakedModel parent;
     @Nullable
     private final ResourceLocation parentLocation;
+    @Nullable
+    private final com.mojang.math.Transformation rootTransform;
+    private final net.neoforged.neoforge.client.RenderTypeGroup renderTypeGroup;
+    private final java.util.Map<String, Boolean> partVisibility;
 
+    /**
+     * @deprecated Neo: use {@link net.neoforged.neoforge.client.model.UnbakedModelParser#parse(Reader)} instead
+     */
+    @Deprecated
     public static BlockModel fromStream(Reader p_111462_) {
         return GsonHelper.fromJson(GSON, p_111462_, BlockModel.class);
     }
@@ -62,12 +_,29 @@
         @Nullable UnbakedModel.GuiLight p_387948_,
         @Nullable ItemTransforms p_273480_
     ) {
+        this(p_273263_, p_272668_, p_386899_, p_272676_, p_387948_, p_273480_, null, net.neoforged.neoforge.client.RenderTypeGroup.EMPTY, java.util.Map.of());
+    }
+
+    public BlockModel(
+            @Nullable ResourceLocation p_273263_,
+            List<BlockElement> p_272668_,
+            TextureSlots.Data p_386899_,
+            @Nullable Boolean p_272676_,
+            @Nullable UnbakedModel.GuiLight p_387948_,
+            @Nullable ItemTransforms p_273480_,
+            @Nullable com.mojang.math.Transformation rootTransform,
+            net.neoforged.neoforge.client.RenderTypeGroup renderTypeGroup,
+            java.util.Map<String, Boolean> partVisibility
+    ) {
         this.elements = p_272668_;
         this.hasAmbientOcclusion = p_272676_;
         this.guiLight = p_387948_;
         this.textureSlots = p_386899_;
         this.parentLocation = p_273263_;
         this.transforms = p_273480_;
+        this.rootTransform = rootTransform;
+        this.renderTypeGroup = renderTypeGroup;
+        this.partVisibility = partVisibility;
     }
 
     @Nullable
@@ -107,10 +_,12 @@
     }
 
     @Override
-    public BakedModel bake(TextureSlots p_387258_, ModelBaker p_388168_, ModelState p_111453_, boolean p_111455_, boolean p_387632_, ItemTransforms p_386577_) {
+    public BakedModel bake(TextureSlots p_387258_, ModelBaker p_388168_, ModelState p_111453_, boolean p_111455_, boolean p_387632_, ItemTransforms p_386577_, net.minecraft.util.context.ContextMap additionalProperties) {
         return this.elements.isEmpty() && this.parent != null
-            ? this.parent.bake(p_387258_, p_388168_, p_111453_, p_111455_, p_387632_, p_386577_)
-            : SimpleBakedModel.bakeElements(this.elements, p_387258_, p_388168_.sprites(), p_111453_, p_111455_, p_387632_, true, p_386577_);
+            ? this.parent.bake(p_387258_, p_388168_, p_111453_, p_111455_, p_387632_, p_386577_, additionalProperties)
+            : SimpleBakedModel.bakeElements(this.elements, p_387258_, p_388168_.sprites(), p_111453_, p_111455_, p_387632_, true, p_386577_,
+                    additionalProperties.getOrDefault(net.neoforged.neoforge.client.model.NeoForgeModelProperties.TRANSFORM, com.mojang.math.Transformation.identity()),
+                    additionalProperties.getOrDefault(net.neoforged.neoforge.client.model.NeoForgeModelProperties.RENDER_TYPE, net.neoforged.neoforge.client.RenderTypeGroup.EMPTY));
     }
 
     @Nullable
@@ -125,6 +_,13 @@
         return this.parentLocation;
     }
 
+    @Override
+    public void fillAdditionalProperties(net.minecraft.util.context.ContextMap.Builder propertiesBuilder) {
+        net.neoforged.neoforge.client.model.NeoForgeModelProperties.fillRootTransformProperty(propertiesBuilder, this.rootTransform);
+        net.neoforged.neoforge.client.model.NeoForgeModelProperties.fillRenderTypeProperty(propertiesBuilder, this.renderTypeGroup);
+        net.neoforged.neoforge.client.model.NeoForgeModelProperties.fillPartVisibilityProperty(propertiesBuilder, this.partVisibility);
+    }
+
     @OnlyIn(Dist.CLIENT)
     public static class Deserializer implements JsonDeserializer<BlockModel> {
         public BlockModel deserialize(JsonElement p_111498_, Type p_111499_, JsonDeserializationContext p_111500_) throws JsonParseException {
@@ -145,7 +_,12 @@
             }
 
             ResourceLocation resourcelocation = s.isEmpty() ? null : ResourceLocation.parse(s);
-            return new BlockModel(resourcelocation, list, textureslots$data, obool, unbakedmodel$guilight, itemtransforms);
+
+            var rootTransform = net.neoforged.neoforge.client.model.NeoForgeModelProperties.deserializeRootTransform(jsonobject, p_111500_);
+            var renderTypeGroup = net.neoforged.neoforge.client.model.NeoForgeModelProperties.deserializeRenderType(jsonobject);
+            var partVisibility = net.neoforged.neoforge.client.model.NeoForgeModelProperties.deserializePartVisibility(jsonobject);
+
+            return new BlockModel(resourcelocation, list, textureslots$data, obool, unbakedmodel$guilight, itemtransforms, rootTransform, renderTypeGroup, partVisibility);
         }
 
         private TextureSlots.Data getTextureMap(JsonObject p_111510_) {
