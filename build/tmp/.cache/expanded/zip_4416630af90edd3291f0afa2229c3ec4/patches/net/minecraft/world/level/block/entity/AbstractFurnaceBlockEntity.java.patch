--- a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -53,6 +_,7 @@
     public static final int NUM_DATA_VALUES = 4;
     public static final int BURN_TIME_STANDARD = 200;
     public static final int BURN_COOL_SPEED = 2;
+    private final RecipeType<? extends AbstractCookingRecipe> recipeType;
     protected NonNullList<ItemStack> items = NonNullList.withSize(3, ItemStack.EMPTY);
     int litTimeRemaining;
     int litTotalTime;
@@ -63,9 +_,14 @@
         public int get(int p_58431_) {
             switch (p_58431_) {
                 case 0:
+                    if (litTotalTime > Short.MAX_VALUE) {
+                        // Neo: preserve litTime / litDuration ratio on the client as data slots are synced as shorts.
+                        return net.minecraft.util.Mth.floor(((double) litTimeRemaining / litTotalTime) * Short.MAX_VALUE);
+                    }
+
                     return AbstractFurnaceBlockEntity.this.litTimeRemaining;
                 case 1:
-                    return AbstractFurnaceBlockEntity.this.litTotalTime;
+                    return Math.min(AbstractFurnaceBlockEntity.this.litTotalTime, Short.MAX_VALUE);
                 case 2:
                     return AbstractFurnaceBlockEntity.this.cookingTimer;
                 case 3:
@@ -105,6 +_,7 @@
     ) {
         super(p_154991_, p_154992_, p_154993_);
         this.quickCheck = RecipeManager.createCheck((RecipeType<AbstractCookingRecipe>)p_154994_);
+        this.recipeType = p_154994_;
     }
 
     private boolean isLit() {
@@ -116,10 +_,10 @@
         super.loadAdditional(p_155025_, p_323468_);
         this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
         ContainerHelper.loadAllItems(p_155025_, this.items, p_323468_);
-        this.cookingTimer = p_155025_.getShort("cooking_time_spent");
-        this.cookingTotalTime = p_155025_.getShort("cooking_total_time");
-        this.litTimeRemaining = p_155025_.getShort("lit_time_remaining");
-        this.litTotalTime = p_155025_.getShort("lit_total_time");
+        this.cookingTimer = p_155025_.getInt("cooking_time_spent");
+        this.cookingTotalTime = p_155025_.getInt("cooking_total_time");
+        this.litTimeRemaining = p_155025_.getInt("lit_time_remaining");
+        this.litTotalTime = p_155025_.getInt("lit_total_time");
         CompoundTag compoundtag = p_155025_.getCompound("RecipesUsed");
 
         for (String s : compoundtag.getAllKeys()) {
@@ -130,10 +_,10 @@
     @Override
     protected void saveAdditional(CompoundTag p_187452_, HolderLookup.Provider p_323656_) {
         super.saveAdditional(p_187452_, p_323656_);
-        p_187452_.putShort("cooking_time_spent", (short)this.cookingTimer);
-        p_187452_.putShort("cooking_total_time", (short)this.cookingTotalTime);
-        p_187452_.putShort("lit_time_remaining", (short)this.litTimeRemaining);
-        p_187452_.putShort("lit_total_time", (short)this.litTotalTime);
+        p_187452_.putInt("cooking_time_spent", this.cookingTimer);
+        p_187452_.putInt("cooking_total_time", this.cookingTotalTime);
+        p_187452_.putInt("lit_time_remaining", this.litTimeRemaining);
+        p_187452_.putInt("lit_total_time", this.litTotalTime);
         ContainerHelper.saveAllItems(p_187452_, this.items, p_323656_);
         CompoundTag compoundtag = new CompoundTag();
         this.recipesUsed.forEach((p_380898_, p_380899_) -> compoundtag.putInt(p_380898_.location().toString(), p_380899_));
@@ -166,11 +_,15 @@
                 p_155017_.litTotalTime = p_155017_.litTimeRemaining;
                 if (p_155017_.isLit()) {
                     flag1 = true;
+                    var remainder = itemstack.getCraftingRemainder();
+                    if (!remainder.isEmpty())
+                        p_155017_.items.set(1, remainder);
+                    else
                     if (flag3) {
                         Item item = itemstack.getItem();
                         itemstack.shrink(1);
                         if (itemstack.isEmpty()) {
-                            p_155017_.items.set(1, item.getCraftingRemainder());
+                            p_155017_.items.set(1, item.getCraftingRemainder()); // Neo: Remainder is handled in the `if` check above.
                         }
                     }
                 }
@@ -223,9 +_,9 @@
                 } else if (!ItemStack.isSameItemSameComponents(itemstack1, itemstack)) {
                     return false;
                 } else {
-                    return itemstack1.getCount() < p_155008_ && itemstack1.getCount() < itemstack1.getMaxStackSize()
+                    return itemstack1.getCount() + itemstack.getCount() <= p_155008_ && itemstack1.getCount() + itemstack.getCount() <= itemstack1.getMaxStackSize() // Neo fix: make furnace respect stack sizes in furnace recipes
                         ? true
-                        : itemstack1.getCount() < itemstack.getMaxStackSize();
+                        : itemstack1.getCount() + itemstack.getCount() <= itemstack.getMaxStackSize(); // Neo fix: make furnace respect stack sizes in furnace recipes
                 }
             }
         } else {
@@ -247,7 +_,7 @@
             if (itemstack2.isEmpty()) {
                 p_267073_.set(2, itemstack1.copy());
             } else if (ItemStack.isSameItemSameComponents(itemstack2, itemstack1)) {
-                itemstack2.grow(1);
+                itemstack2.grow(itemstack1.getCount());
             }
 
             if (itemstack.is(Blocks.WET_SPONGE.asItem()) && !p_267073_.get(1).isEmpty() && p_267073_.get(1).is(Items.BUCKET)) {
@@ -262,7 +_,7 @@
     }
 
     protected int getBurnDuration(FuelValues p_363501_, ItemStack p_58343_) {
-        return p_363501_.burnDuration(p_58343_);
+        return p_58343_.getBurnTime(this.recipeType, p_363501_);
     }
 
     private static int getTotalCookTime(ServerLevel p_380169_, AbstractFurnaceBlockEntity p_222694_) {
@@ -325,7 +_,7 @@
             return true;
         } else {
             ItemStack itemstack = this.items.get(1);
-            return this.level.fuelValues().isFuel(p_58390_) || p_58390_.is(Items.BUCKET) && !itemstack.is(Items.BUCKET);
+            return p_58390_.getBurnTime(this.recipeType, this.level.fuelValues()) > 0 || p_58390_.is(Items.BUCKET) && !itemstack.is(Items.BUCKET);
         }
     }
 
