--- a/net/minecraft/client/resources/model/ModelBakery.java
+++ b/net/minecraft/client/resources/model/ModelBakery.java
@@ -46,19 +_,36 @@
     private final Map<ResourceLocation, ClientItem> clientInfos;
     final Map<ResourceLocation, UnbakedModel> unbakedPlainModels;
     final UnbakedModel missingModel;
+    private final Map<ResourceLocation, UnbakedModel> standaloneModels;
+
+    /**
+     * @deprecated Neo: use {@link #ModelBakery(EntityModelSet, Map, Map, Map, UnbakedModel, Map)} ModelBakery instead}
+     */
+    @Deprecated
+    public ModelBakery(
+            EntityModelSet p_388903_,
+            Map<ModelResourceLocation, UnbakedBlockStateModel> p_251087_,
+            Map<ResourceLocation, ClientItem> p_250416_,
+            Map<ResourceLocation, UnbakedModel> p_388404_,
+            UnbakedModel p_360944_
+    ) {
+        this(p_388903_, p_251087_, p_250416_, p_388404_, p_360944_, Map.of());
+    }
 
     public ModelBakery(
         EntityModelSet p_388903_,
         Map<ModelResourceLocation, UnbakedBlockStateModel> p_251087_,
         Map<ResourceLocation, ClientItem> p_250416_,
         Map<ResourceLocation, UnbakedModel> p_388404_,
-        UnbakedModel p_360944_
+        UnbakedModel p_360944_,
+        Map<ResourceLocation, UnbakedModel> standaloneModels
     ) {
         this.entityModelSet = p_388903_;
         this.unbakedBlockStateModels = p_251087_;
         this.clientInfos = p_250416_;
         this.unbakedPlainModels = p_388404_;
         this.missingModel = p_360944_;
+        this.standaloneModels = standaloneModels;
     }
 
     public ModelBakery.BakingResult bakeModels(ModelBakery.TextureGetter p_352431_) {
@@ -92,7 +_,18 @@
                 LOGGER.warn("Unable to bake item model: '{}'", p_390101_, exception);
             }
         });
-        return new ModelBakery.BakingResult(bakedmodel, map, itemmodel, map1, map2);
+        Map<ResourceLocation, BakedModel> bakedStandaloneModels = new HashMap<>(this.standaloneModels.size());
+        this.standaloneModels.forEach((location, model) -> {
+            try {
+                ModelDebugName debugName = () -> location + "#standalone";
+                ModelBakerImpl modelBaker = new ModelBakerImpl(p_352431_, debugName);
+                BakedModel bakedModel = UnbakedModel.bakeWithTopModelValues(model, modelBaker, BlockModelRotation.X0_Y0);
+                bakedStandaloneModels.put(location, bakedModel);
+            } catch (Exception exception) {
+                LOGGER.warn("Unable to bake standalone model: '{}': {}", location, exception);
+            }
+        });
+        return new ModelBakery.BakingResult(bakedmodel, map, itemmodel, map1, map2, bakedStandaloneModels);
     }
 
     @OnlyIn(Dist.CLIENT)
@@ -105,8 +_,22 @@
         Map<ModelResourceLocation, BakedModel> blockStateModels,
         ItemModel missingItemModel,
         Map<ResourceLocation, ItemModel> itemStackModels,
-        Map<ResourceLocation, ClientItem.Properties> itemProperties
+        Map<ResourceLocation, ClientItem.Properties> itemProperties,
+        Map<ResourceLocation, BakedModel> standaloneModels
     ) {
+        /**
+         * @deprecated Neo: use {@link #BakingResult(BakedModel, Map, ItemModel, Map, Map, Map)}} instead
+         */
+        @Deprecated
+        public BakingResult(
+                BakedModel missingModel,
+                Map<ModelResourceLocation, BakedModel> blockStateModels,
+                ItemModel missingItemModel,
+                Map<ResourceLocation, ItemModel> itemStackModels,
+                Map<ResourceLocation, ClientItem.Properties> itemProperties
+        ) {
+            this(missingModel, blockStateModels, missingItemModel, itemStackModels, itemProperties, Map.of());
+        }
     }
 
     @OnlyIn(Dist.CLIENT)
