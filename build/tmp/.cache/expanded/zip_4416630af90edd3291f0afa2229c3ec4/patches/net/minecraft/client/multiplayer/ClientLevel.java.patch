--- a/net/minecraft/client/multiplayer/ClientLevel.java
+++ b/net/minecraft/client/multiplayer/ClientLevel.java
@@ -115,7 +_,7 @@
     private final TickRateManager tickRateManager;
     private final Minecraft minecraft = Minecraft.getInstance();
     final List<AbstractClientPlayer> players = Lists.newArrayList();
-    final List<EnderDragonPart> dragonParts = Lists.newArrayList();
+    final List<net.neoforged.neoforge.entity.PartEntity<?>> dragonParts = Lists.newArrayList();
     private final Map<MapId, MapItemSavedData> mapData = Maps.newHashMap();
     private static final int CLOUD_COLOR = -1;
     private int skyFlashTime;
@@ -131,6 +_,7 @@
             p_194170_.put(
                 BiomeColors.WATER_COLOR_RESOLVER, new BlockTintCache(p_194168_ -> this.calculateBlockTint(p_194168_, BiomeColors.WATER_COLOR_RESOLVER))
             );
+            net.neoforged.neoforge.client.ColorResolverManager.registerBlockTintCaches(ClientLevel.this, p_194170_);
         }
     );
     private final ClientChunkCache chunkSource;
@@ -140,6 +_,7 @@
     private final int seaLevel;
     private boolean tickDayTime;
     private static final Set<Item> MARKER_PARTICLE_ITEMS = Set.of(Items.BARRIER, Items.LIGHT);
+    private final net.neoforged.neoforge.client.model.data.ModelDataManager modelDataManager = new net.neoforged.neoforge.client.model.data.ModelDataManager(this);
 
     public void handleBlockChangedAck(int p_233652_) {
         this.blockStatePredictionHandler.endPredictionsUpTo(p_233652_, this);
@@ -169,10 +_,15 @@
     @Override
     public boolean setBlock(BlockPos p_233643_, BlockState p_233644_, int p_233645_, int p_233646_) {
         if (this.blockStatePredictionHandler.isPredicting()) {
+            // Neo: Record and store a snapshot in the prediction so that BE data can be restored if the break is denied.
+            // Fixes MC-36093 and permits correct server-side only cancellation of block changes.
+            var snapshot = net.neoforged.neoforge.common.util.BlockSnapshot.create(this.dimension(), this, p_233643_, p_233645_);
+
             BlockState blockstate = this.getBlockState(p_233643_);
             boolean flag = super.setBlock(p_233643_, p_233644_, p_233645_, p_233646_);
             if (flag) {
                 this.blockStatePredictionHandler.retainKnownServerState(p_233643_, blockstate, this.minecraft.player);
+                this.blockStatePredictionHandler.retainSnapshot(p_233643_, snapshot);
             }
 
             return flag;
@@ -206,6 +_,7 @@
         this.serverSimulationDistance = p_363776_;
         this.updateSkyBrightness();
         this.prepareWeather();
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.LevelEvent.Load(this));
     }
 
     public void queueLightUpdate(Runnable p_194172_) {
@@ -249,7 +_,7 @@
     private void tickTime() {
         this.clientLevelData.setGameTime(this.clientLevelData.getGameTime() + 1L);
         if (this.tickDayTime) {
-            this.clientLevelData.setDayTime(this.clientLevelData.getDayTime() + 1L);
+            this.clientLevelData.setDayTime(this.clientLevelData.getDayTime() + advanceDaytime());
         }
     }
 
@@ -288,7 +_,11 @@
         p_104640_.setOldPosAndRot();
         p_104640_.tickCount++;
         Profiler.get().push(() -> BuiltInRegistries.ENTITY_TYPE.getKey(p_104640_.getType()).toString());
-        p_104640_.tick();
+        // Neo: Permit cancellation of Entity#tick via EntityTickEvent.Pre
+        if (!net.neoforged.neoforge.event.EventHooks.fireEntityTickPre(p_104640_).isCanceled()) {
+            p_104640_.tick();
+            net.neoforged.neoforge.event.EventHooks.fireEntityTickPost(p_104640_);
+        }
         Profiler.get().pop();
 
         for (Entity entity : p_104640_.getPassengers()) {
@@ -339,8 +_,10 @@
     }
 
     public void addEntity(Entity p_104741_) {
+        if (net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.EntityJoinLevelEvent(p_104741_, this)).isCanceled()) return;
         this.removeEntity(p_104741_.getId(), Entity.RemovalReason.DISCARDED);
         this.entityStorage.addEntity(p_104741_);
+        p_104741_.onAddedToLevel();
     }
 
     public void removeEntity(int p_171643_, Entity.RemovalReason p_171644_) {
@@ -511,6 +_,13 @@
         float p_263349_,
         long p_263408_
     ) {
+        net.neoforged.neoforge.event.PlayLevelSoundEvent.AtPosition event = net.neoforged.neoforge.event.EventHooks.onPlaySoundAtPosition(this, p_263372_, p_263404_, p_263365_, p_263335_, p_263417_, p_263416_, p_263349_);
+        if (event.isCanceled() || event.getSound() == null) return;
+        p_263335_ = event.getSound();
+        p_263417_ = event.getSource();
+        p_263416_ = event.getNewVolume();
+        p_263349_ = event.getNewPitch();
+
         if (p_263381_ == this.minecraft.player) {
             this.playSound(p_263372_, p_263404_, p_263365_, p_263335_.value(), p_263417_, p_263416_, p_263349_, false, p_263408_);
         }
@@ -520,6 +_,12 @@
     public void playSeededSound(
         @Nullable Player p_263514_, Entity p_263536_, Holder<SoundEvent> p_263518_, SoundSource p_263487_, float p_263538_, float p_263524_, long p_263509_
     ) {
+        net.neoforged.neoforge.event.PlayLevelSoundEvent.AtEntity event = net.neoforged.neoforge.event.EventHooks.onPlaySoundAtEntity(p_263536_, p_263518_, p_263487_, p_263538_, p_263524_);
+        if (event.isCanceled() || event.getSound() == null) return;
+        p_263518_ = event.getSound();
+        p_263487_ = event.getSource();
+        p_263538_ = event.getNewVolume();
+        p_263524_ = event.getNewPitch();
         if (p_263514_ == this.minecraft.player) {
             this.minecraft.getSoundManager().play(new EntityBoundSoundInstance(p_263518_.value(), p_263487_, p_263538_, p_263524_, p_263536_, p_263509_));
         }
@@ -731,7 +_,7 @@
         return this.players;
     }
 
-    public List<EnderDragonPart> dragonParts() {
+    public List<net.neoforged.neoforge.entity.PartEntity<?>> dragonParts() {
         return this.dragonParts;
     }
 
@@ -1056,6 +_,7 @@
         }
 
         public void setDifficulty(Difficulty p_104852_) {
+            net.neoforged.neoforge.common.CommonHooks.onDifficultyChange(p_104852_, this.difficulty);
             this.difficulty = p_104852_;
         }
 
@@ -1098,6 +_,9 @@
                     ClientLevel.this.dragonParts.addAll(Arrays.asList(enderdragon.getSubEntities()));
                     break;
                 default:
+                    if (p_171712_.isMultipartEntity()) {
+                        ClientLevel.this.dragonParts.addAll(Arrays.asList(p_171712_.getParts()));
+                    }
             }
         }
 
@@ -1112,10 +_,58 @@
                     ClientLevel.this.dragonParts.removeAll(Arrays.asList(enderdragon.getSubEntities()));
                     break;
                 default:
+                    if (p_171716_.isMultipartEntity()) {
+                        ClientLevel.this.dragonParts.removeAll(Arrays.asList(p_171716_.getParts()));
+                    }
             }
+
+            p_171716_.onRemovedFromLevel();
+            net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.EntityLeaveLevelEvent(p_171716_, ClientLevel.this));
         }
 
         public void onSectionChange(Entity p_233660_) {
         }
+    }
+
+    @Override
+    public net.neoforged.neoforge.client.model.data.ModelDataManager getModelDataManager() {
+        return modelDataManager;
+    }
+
+    @Override
+    public net.neoforged.neoforge.client.model.data.ModelData getModelData(BlockPos pos) {
+        return modelDataManager.getAt(pos);
+    }
+
+    @Override
+    public float getShade(float normalX, float normalY, float normalZ, boolean shade) {
+        boolean constantAmbientLight = this.effects().constantAmbientLight();
+        if (!shade)
+            return constantAmbientLight ? 0.9F : 1.0F;
+        return net.neoforged.neoforge.client.model.lighting.QuadLighter.calculateShade(normalX, normalY, normalZ, constantAmbientLight);
+    }
+
+    // Neo: Variable day time code
+
+    private float dayTimeFraction = 0.0f;
+    private float dayTimePerTick = -1.0f;
+
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public void setDayTimeFraction(float dayTimeFraction) {
+        this.dayTimeFraction = dayTimeFraction;
+    }
+
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public float getDayTimeFraction() {
+        return dayTimeFraction;
+    }
+
+    public float getDayTimePerTick() {
+        return dayTimePerTick;
+    }
+
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public void setDayTimePerTick(float dayTimePerTick) {
+        this.dayTimePerTick = dayTimePerTick;
     }
 }
