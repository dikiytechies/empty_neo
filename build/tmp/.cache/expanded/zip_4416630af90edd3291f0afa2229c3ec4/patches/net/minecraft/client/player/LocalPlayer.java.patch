--- a/net/minecraft/client/player/LocalPlayer.java
+++ b/net/minecraft/client/player/LocalPlayer.java
@@ -307,6 +_,7 @@
         ServerboundPlayerActionPacket.Action serverboundplayeractionpacket$action = p_108701_
             ? ServerboundPlayerActionPacket.Action.DROP_ALL_ITEMS
             : ServerboundPlayerActionPacket.Action.DROP_ITEM;
+        if (isUsingItem() && getUsedItemHand() == InteractionHand.MAIN_HAND && (p_108701_ || getUseItem().getCount() == 1)) stopUsingItem(); // Forge: fix MC-231097 on the clientside
         ItemStack itemstack = this.getInventory().removeFromSelected(p_108701_);
         this.connection.send(new ServerboundPlayerActionPacket(serverboundplayeractionpacket$action, BlockPos.ZERO, Direction.DOWN));
         return !itemstack.isEmpty();
@@ -487,7 +_,14 @@
 
     @Override
     public void playSound(SoundEvent p_108651_, float p_108652_, float p_108653_) {
-        this.level().playLocalSound(this.getX(), this.getY(), this.getZ(), p_108651_, this.getSoundSource(), p_108652_, p_108653_, false);
+        net.minecraft.core.Holder<SoundEvent> holder = net.minecraft.core.registries.BuiltInRegistries.SOUND_EVENT.wrapAsHolder(p_108651_);
+        net.neoforged.neoforge.event.PlayLevelSoundEvent.AtEntity event = net.neoforged.neoforge.event.EventHooks.onPlaySoundAtEntity(this, holder, this.getSoundSource(), p_108652_, p_108653_);
+        if (event.isCanceled() || event.getSound() == null) return;
+        p_108651_ = event.getSound().value();
+        SoundSource source = event.getSource();
+        p_108652_ = event.getNewVolume();
+        p_108653_ = event.getNewPitch();
+        this.level().playLocalSound(this.getX(), this.getY(), this.getZ(), p_108651_, source, p_108652_, p_108653_, false);
     }
 
     @Override
@@ -680,6 +_,7 @@
             && this.canPlayerFitWithinBlocksAndEntitiesWhen(Pose.CROUCHING)
             && (this.isShiftKeyDown() || !this.isSleeping() && !this.canPlayerFitWithinBlocksAndEntitiesWhen(Pose.STANDING));
         this.input.tick();
+        net.neoforged.neoforge.client.ClientHooks.onMovementInputUpdate(this, this.input);
         this.minecraft.getTutorial().onInput(this.input);
         if (this.shouldStopSprinting()) {
             this.setSprinting(false);
@@ -718,7 +_,7 @@
         boolean flag3 = this.canStartSprinting();
         boolean flag4 = this.isPassenger() ? this.getVehicle().onGround() : this.onGround();
         boolean flag5 = !flag1 && !flag2;
-        if ((flag4 || this.isUnderWater()) && flag5 && flag3) {
+        if ((flag4 || this.isUnderWater() || this.canStartSwimming()) && flag5 && flag3) {
             if (this.sprintTriggerTime <= 0 && !this.minecraft.options.keySprint.isDown()) {
                 this.sprintTriggerTime = 7;
             } else {
@@ -726,15 +_,15 @@
             }
         }
 
-        if ((!this.isInWater() || this.isUnderWater()) && flag3 && this.minecraft.options.keySprint.isDown()) {
+        if (!this.isSprinting() && (!(this.isInWater() || this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType))) || (this.isUnderWater() || this.canStartSwimming())) && this.hasEnoughImpulseToStartSprinting() && flag3 && !this.isUsingItem() && !this.hasEffect(MobEffects.BLINDNESS) && this.minecraft.options.keySprint.isDown()) {
             this.setSprinting(true);
         }
 
         if (this.isSprinting()) {
             boolean flag6 = !this.input.hasForwardImpulse() || !this.hasEnoughFoodToStartSprinting();
-            boolean flag7 = flag6 || this.horizontalCollision && !this.minorHorizontalCollision || this.isInWater() && !this.isUnderWater();
+            boolean flag7 = flag6 || this.horizontalCollision && !this.minorHorizontalCollision || this.isInWater() && !this.isUnderWater() || (this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType)) && !this.canStartSwimming());
             if (this.isSwimming()) {
-                if (!this.onGround() && !this.input.keyPresses.shift() && flag6 || !this.isInWater()) {
+                if (!this.onGround() && !this.input.keyPresses.shift() && flag6 || !(this.isInWater() || this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType)))) {
                     this.setSprinting(false);
                 }
             } else if (flag7) {
@@ -743,7 +_,7 @@
         }
 
         boolean flag9 = false;
-        if (abilities.mayfly) {
+        if (this.mayFly()) {
             if (this.minecraft.gameMode.isAlwaysFlying()) {
                 if (!abilities.flying) {
                     abilities.flying = true;
@@ -896,6 +_,10 @@
     @Override
     public void rideTick() {
         super.rideTick();
+        if (this.wantsToStopRiding() && this.isPassenger()) {
+            Input input = this.input.keyPresses;
+            this.input.keyPresses = new Input(input.forward(), input.backward(), input.left(), input.right(), input.jump(), false, input.sprint());
+        }
         this.handsBusy = false;
         if (this.getControlledVehicle() instanceof AbstractBoat abstractboat) {
             abstractboat.setInput(
@@ -1094,7 +_,7 @@
     }
 
     private boolean hasEnoughFoodToStartSprinting() {
-        return this.isPassenger() || (float)this.getFoodData().getFoodLevel() > 6.0F || this.getAbilities().mayfly;
+        return this.isPassenger() || (float)this.getFoodData().getFoodLevel() > 6.0F || this.mayFly();
     }
 
     public float getWaterVision() {
