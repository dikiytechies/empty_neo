--- a/net/minecraft/server/ReloadableServerResources.java
+++ b/net/minecraft/server/ReloadableServerResources.java
@@ -41,6 +_,9 @@
         this.commands = new Commands(p_206858_, CommandBuildContext.simple(p_361583_, p_250695_));
         this.advancements = new ServerAdvancementManager(p_361583_);
         this.functionLibrary = new ServerFunctionLibrary(p_206859_, this.commands.getDispatcher());
+        // Neo: Store registries and create context object
+        this.registryLookup = p_361583_;
+        this.context = new net.neoforged.neoforge.common.conditions.ConditionContext(this.postponedTags, p_362982_.compositeAccess(), p_250695_);
     }
 
     public ServerFunctionLibrary getFunctionLibrary() {
@@ -67,6 +_,25 @@
         return List.of(this.recipes, this.functionLibrary, this.advancements);
     }
 
+    private final HolderLookup.Provider registryLookup;
+    private final net.neoforged.neoforge.common.conditions.ConditionContext context;
+
+    /**
+     * Exposes the current condition context for usage in other reload listeners.<br>
+     * This is not useful outside the reloading stage.
+     * @return The condition context for the currently active reload.
+     */
+    public net.neoforged.neoforge.common.conditions.ICondition.IContext getConditionContext() {
+        return this.context;
+    }
+
+    /**
+      * {@return the lookup provider access for the currently active reload}
+      */
+    public HolderLookup.Provider getRegistryLookup() {
+        return this.registryLookup;
+    }
+
     public static CompletableFuture<ReloadableServerResources> loadResources(
         ResourceManager p_248588_,
         LayeredRegistryAccess<RegistryLayer> p_335667_,
@@ -83,10 +_,30 @@
                     ReloadableServerResources reloadableserverresources = new ReloadableServerResources(
                         p_359514_.layers(), p_359514_.lookupWithUpdatedTags(), p_250212_, p_249301_, p_363739_, p_251126_
                     );
+
+                    // Neo: Fire the AddServerReloadListenersEvent and use the resulting listeners instead of the vanilla listener list.
+                    List<PreparableReloadListener> listeners = net.neoforged.neoforge.event.EventHooks.onResourceReload(reloadableserverresources, p_359514_.layers().compositeAccess());
+
+                    // Neo: Inject the ConditionContext and RegistryLookup to any resource listener that requests it.
+                    for (PreparableReloadListener rl : listeners) {
+                        if (rl instanceof net.neoforged.neoforge.resource.ContextAwareReloadListener carl) {
+                            carl.injectContext(reloadableserverresources.context, reloadableserverresources.registryLookup);
+                        }
+                    }
+
                     return SimpleReloadInstance.create(
-                            p_248588_, reloadableserverresources.listeners(), p_249136_, p_249601_, DATA_RELOAD_INITIAL_TASK, LOGGER.isDebugEnabled()
+                            p_248588_, listeners, p_249136_, p_249601_, DATA_RELOAD_INITIAL_TASK, LOGGER.isDebugEnabled()
                         )
                         .done()
+                        .thenRun(() -> {
+                            // Neo: Clear context after reload completes
+                            reloadableserverresources.context.clear();
+                            listeners.forEach(rl -> {
+                                if (rl instanceof net.neoforged.neoforge.resource.ContextAwareReloadListener srl) {
+                                    srl.injectContext(net.neoforged.neoforge.common.conditions.ICondition.IContext.EMPTY, net.minecraft.core.RegistryAccess.EMPTY);
+                                }
+                            });
+                        })
                         .thenApply(p_214306_ -> reloadableserverresources);
                 }
             );
@@ -94,5 +_,6 @@
 
     public void updateStaticRegistryTags() {
         this.postponedTags.forEach(Registry.PendingTags::apply);
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.TagsUpdatedEvent(registryLookup, false, false));
     }
 }
